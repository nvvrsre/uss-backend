name: Ushasree Backend CI/CD Pipeline (Helm + ArgoCD)

on:
  push:
    branches: [ main ]

permissions: write-all

jobs:
  uss-backend-ci-cd:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1   # Serial to avoid push race conditions
      matrix:
        service:
          - api-gateway
          - auth-service
          - cart-service
          - catalog-service
          - notification-service
          - order-service
          - payment-service
          - product-service
          - promo-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          cd ${{ matrix.service }}
          npm install

      - name: Run ESLint
        run: |
          cd ${{ matrix.service }}
          npx eslint server.js start.js tests/ || true

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2
        with:
          projectBaseDir: ${{ matrix.service }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Run Unit Tests
        run: |
          cd ${{ matrix.service }}
          npm test

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set version from git commit count
        id: version
        run: |
          version=$(git rev-list --count HEAD)
          echo "VERSION=$version" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:v${{ steps.version.outputs.VERSION }} ${{ matrix.service }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:v${{ steps.version.outputs.VERSION }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:v${{ steps.version.outputs.VERSION }}

      # --- Helm image tag update ---
      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.44.1/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: Update Helm values.yaml with new image tag
        run: |
          yq -i '.image.tag = "v${{ steps.version.outputs.VERSION }}"' ${{ matrix.service }}/helm/values.yaml

      - name: Show image tag after update
        run: yq '.image.tag' ${{ matrix.service }}/helm/values.yaml

      - name: Commit and push updated values.yaml
        run: |
          git config --global user.email "nvvr53@gmail.com"
          git config --global user.name "nvvrsre"
          git add ${{ matrix.service }}/helm/values.yaml
          git commit -m "ci: update image tag for ${{ matrix.service }} to v${{ steps.version.outputs.VERSION }}" || echo "No changes to commit"
          n=0
          until [ $n -ge 3 ]
          do
            git pull --rebase origin main && git push origin main && break
            n=$((n+1))
            echo "Push failed, retrying ($n/3)..."
            sleep 2
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
